var documenterSearchIndex = {"docs":
[{"location":"functions/#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"functions/#Heaviside-and-Indicator-Functions","page":"Functions","title":"Heaviside and Indicator Functions","text":"","category":"section"},{"location":"functions/#SmoothApproximations.approx_heaviside","page":"Functions","title":"SmoothApproximations.approx_heaviside","text":"approx_heaviside(; from=0, to=1, at=0, k=50)\n\nApproximate the heaviside step function, generalized to any step size (from and to) and location (at), using a hyperbolic tangent function with steepness parameter k.\n\nHeaviside:\n\nx < at x == at x > at\nfrom (to-from)  2 to\n\nApproximate Heaviside:\n\n(to - from) * tanh(k * (x - at))  2 + (from + to)  2\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"using SmoothApproximations, PlotlyLight  # hide\nx = range(-2, 2, 200)  # hide\ndata = [  # hide\n    (Config(; x, y=approx_heaviside(; k).(x), name=\"k=$k\") for k in [1, 5, 10, 20])...,  # hide\n    Config(x=[-10,0], y=[0, 0], name=\"original: (x < 0)\", legendgroup=\"1\", mode=\"lines\", line=(; color=\"white\")),  # hide\n    # Config(x=[0], y=[1/2], legendgroup=\"1\", showlegend=false, mode=\"markers\", marker=(;size=10, color=\"white\")),  # hide\n    Config(x=[0,10], y=[1, 1], legendgroup=\"1\", showlegend=false, mode=\"lines\", line=(; color=\"white\")),  # hide\n]  # hide\np = Plot(data)  # hide\np.layout.title.text = \"(x < 0) ≈ approx_heaviside(; k=k)(x)\"  # hide\np.layout.xaxis.range=extrema(x)  # hide\np.layout.yaxis.range=(0, 1)  # hide\np  # hide","category":"page"},{"location":"functions/#Maximum-and-Minimum","page":"Functions","title":"Maximum and Minimum","text":"","category":"section"},{"location":"functions/#SmoothApproximations.majorize_min","page":"Functions","title":"SmoothApproximations.majorize_min","text":"majorize_min(f, val; k=10)\n\nSmooth majorization of x -> min(f(x), val) where f is a smooth function and val is a constant.\n\n\n\n\n\n","category":"function"},{"location":"functions/#SmoothApproximations.majorize_max","page":"Functions","title":"SmoothApproximations.majorize_max","text":"majorize_max(f, val; k=10)\n\nSmooth majorization of x -> max(f(x), val) where f is a smooth function and val is a constant.\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Functions","title":"Functions","text":"using SmoothApproximations, PlotlyLight  # hide\nx = range(-2, 2, 200)  # hide\ny = max.(x, 1)  # hide\ndata = [  # hide\n    Config(; x, y, name=\"original: max(x, 1)\", line=(;color=\"white\"))  # hide\n    [Config(; x, y=majorize_max(identity, 1; k).(x), name=\"majorize_max(identity, 1; k=$k)\") for k in [1, 5, 10, 20]]...  # hide\n]  # hide\np = Plot(data)  # hide\np.layout.title.text = \"max(x, 1) ≈ majorize_max(identity, 1; k=k)(x)\"  # hide\np.layout.yaxis.range=(0, 2.5)  # hide\np  # hide","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"using SmoothApproximations, PlotlyLight  # hide\nx = range(-2, 2, 200)  # hide\ny = max.(abs2.(x), 1)  # hide\ndata = [  # hide\n    [Config(; x, y=majorize_max(abs2, 1; k).(x), name=\"majorize_max(abs2, 1; k=$k)\") for k in [1, 5, 10, 20]]...  # hide\n    Config(; x, y, name=\"original: max(abs2(x), 1)\", line=(;color=\"white\"))  # hide\n]  # hide\np = Plot(data)  # hide\np.layout.title.text = \"max(abs2(x), 1) ≈ majorize_max(abs2, 1; k=k)(x)\"  # hide\np.layout.yaxis.range=(0, 2.5)  # hide\np  # hide","category":"page"},{"location":"#Home","page":"Home","title":"Home","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SmoothApproximations provides smooth (infinitely differentiable) approximations to common function that have discontinuities.","category":"page"},{"location":"#Concepts","page":"Home","title":"Concepts","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In some applications you may want a guarantee that your approximation has certain properties (e.g. guarantee of generating a conservative upper bound).  In this package, we use function prefixes to indicate specific qualities:","category":"page"},{"location":"","page":"Home","title":"Home","text":"approx_\nmajorize_\nminorize_","category":"page"},{"location":"#Approximation-(approx_)","page":"Home","title":"Approximation (approx_)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Functions that begin with approx_ have no guarantees other than infinite differentiability.\nDepending on the input, the approximation may evaluate to a value either smaller or larger than that of the original function.","category":"page"},{"location":"#Majorization-(majorize_)","page":"Home","title":"Majorization (majorize_)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A function g(x) is said to majorize f(x)) over domain D if f(x)  g(x) for all x in D.\nIn other words, majorize_ functions are guaranteed to be larger than or equal to the original function.","category":"page"},{"location":"#Minorization-(minorize_)","page":"Home","title":"Minorization (minorize_)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A function g(x) is said to minorize f(x)) over domain D if f(x)  g(x) for all x in D.\nIn other words, minorize_ functions are guaranteed to be smaller than or equal to the original function.","category":"page"}]
}
