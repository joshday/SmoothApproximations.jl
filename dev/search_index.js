var documenterSearchIndex = {"docs":
[{"location":"functions/#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"functions/#SmoothApproximations.approx_heaviside-Tuple{}","page":"Functions","title":"SmoothApproximations.approx_heaviside","text":"approx_heaviside(; from=0, to=1, at=0, k=50)\n\nApproximate the heaviside step function, generalized to any step size (from and to) and location (at), using a hyperbolic tangent function with steepness parameter k.\n\nHeaviside:\n\nx < at x == at x > at\nfrom (to-from)  2 to\n\nApproximate Heaviside:\n\n(to - from) * tanh(k * (x - at))  2 + (from + to)  2\n\n\n\n\n\n","category":"method"},{"location":"functions/#SmoothApproximations.majorize_max-Tuple{Any, Any}","page":"Functions","title":"SmoothApproximations.majorize_max","text":"majorize_max(f, val; k=10)\n\nSmooth majorization of x -> max(f(x), val) where f is a smooth function and val is a constant.\n\n\n\n\n\n","category":"method"},{"location":"functions/#SmoothApproximations.majorize_min-Tuple{Any, Any}","page":"Functions","title":"SmoothApproximations.majorize_min","text":"majorize_min(f, val; k=10)\n\nSmooth majorization of x -> min(f(x), val) where f is a smooth function and val is a constant.\n\n\n\n\n\n","category":"method"},{"location":"functions/#SmoothApproximations.minorize_max-Tuple{Any, Any}","page":"Functions","title":"SmoothApproximations.minorize_max","text":"minorize_max(f, val; k=10)\n\nSmooth minorization of x -> max(f(x), val) where f is a smooth function and val is a constant.\n\n\n\n\n\n","category":"method"},{"location":"functions/#SmoothApproximations.minorize_min-Tuple{Any, Any}","page":"Functions","title":"SmoothApproximations.minorize_min","text":"minorize_min(f, val; k=10)\n\nSmooth minorization of x -> min(f(x), val) where f is a smooth function and val is a constant.\n\n\n\n\n\n","category":"method"},{"location":"#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"SmoothApproximations provides smooth (infinitely differentiable) approximations to common function that have discontinuities.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"note: Note\nFunctions provided in SmoothApproximations return another function, e.g.    using SmoothApproximations\n\n    f = majorize_min(identity, 1; k=15)\n\n    f(0.7)","category":"page"},{"location":"#Kinds-of-Approximations","page":"Introduction","title":"Kinds of Approximations","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This package contains three kinds of function approximations, denoted with a prefix:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"approx_\nmajorize_\nminorize_","category":"page"},{"location":"#Approximation-(approx_)","page":"Introduction","title":"Approximation (approx_)","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Functions that begin with approx_ have no guarantees other than infinite differentiability.\nDepending on the input, the approximation may evaluate to a value either smaller or larger than that of the original function.","category":"page"},{"location":"#Majorization-(majorize_)","page":"Introduction","title":"Majorization (majorize_)","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"A function g(x) is said to majorize f(x) over domain D if f(x)  g(x) for all x in D.\nIn other words, majorize_ functions are guaranteed to be larger than or equal to the original function.","category":"page"},{"location":"#Minorization-(minorize_)","page":"Introduction","title":"Minorization (minorize_)","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"A function g(x) is said to minorize f(x)) over domain D if f(x)  g(x) for all x in D.\nIn other words, minorize_ functions are guaranteed to be smaller than or equal to the original function.","category":"page"}]
}
